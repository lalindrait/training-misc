openssl genrsa	        Create an RSA private key.
openssl req	            Create CA certificate and CSRs (certificate signing requests).
openssl ca	            Create node and client certificates using the CSRs.





Create private public key pair
==============================
openssl genrsa
openssl genrsa --help

### create a key pair
openssl genrsa -out lv-2048-key.pem 2048
openssl genrsa -out lv-4096-key.pem 4096

# notice that the file sizes are different. # larger the key size larger the file content
ls -lh
cat lv-2048-key.pem
cat lv-4096-key.pem

### create a public key from a private key
openssl rsa --help
openssl rsa -in lv-2048-key.pem -outform PEM -pubout
openssl rsa -in lv-2048-key.pem -outform PEM -pubout -out lv-2048-publickey.pem
openssl rsa -in lv-4096-key.pem  -outform PEM -pubout -out lv-4096-publickey.pem

### public key sizes are also different

# Visually Inspect Your Key Files
# It is important to visually inspect you private and 
# public key files to make sure that they are what you expect. 
# OpenSSL will clearly explain the nature of the key block 
# with a -----BEGIN RSA PRIVATE KEY----- or -----BEGIN PUBLIC KEY-----

### find key size
openssl rsa -in lv-2048-key.pem -text -noout
openssl x509 -in public.pem -text -noout | grep "Public Key"


### to find the key size of a openssh key pair used for ssh
ssh-keygen -lf id_rsa
ssh-keygen -lf id_rsa.pub

### convert PRM to DEr format
openssl x509 -in cert.crt -outform DER -out cert.cer

### create a cert fingerprint
sha1sum cert.cer
openssl x509  -fingerprint  -in my-cert.cer  

View Certificate Details - Kubernetes
==========================================
#To view CA, API Server, ETCD certs and keys
cd /etc/kubernetes/pki
ls -l 
openssl x509 -in apiserver.crt -text -noout



Acessing k8s API thorugh curl
==============================
cat /etc/kubernetes/admin.conf
# put the data fileds in to a seperate fileds

cat encoded-admin.crt | base64 --decode > admin.crt
cat encoded-admin.key | base64 --decode > admin.key
cat encoded-ca.crt | base64 --decode > ca.crt

kubectl cluster-info 
curl https://192.168.1.231:6443/api/v1/pods --key admin.key --cert admin.crt --cacert ca.crt


